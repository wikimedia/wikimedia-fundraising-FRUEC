#!/usr/bin/python3

import sys
import argparse
from datetime import datetime

from fr_user_event_consumer import config, setup_logging, controller
from fr_user_event_consumer.event_type import EventType

# Entry point
if __name__ == '__main__':

    # Set up command-line arguments
    parser = argparse.ArgumentParser(
        description =
            'Fundraising User Events Consumer (FRUEC)\n'
            '========================================\n\n'
            'Read log files containing JSON that describes user-facing events for\n'
            'Wikimedia Fundraising. Store the events (possibly in aggregated form)\n'
            'in a database.\n\n'
            'Two commands are available (see below). For detailed help about the\n'
            'options available for each, run: fruec [command] --help.\n\n'
            'Notes: Log filenames must be globally unique across all types of logs\n'
            'consumed by fr_user_event_consumer. Regardless of the options selected,\n'
            'events will only be consumed from files that have not been marked as\n'
            'already processed.',
        formatter_class = argparse.RawTextHelpFormatter
    )

    # There are three global options available for both commands: --event-type,
    # --config and --debug. However, we add those as specific arguments for each
    # command, so that they may be placed after the command. Here we just set
    # some variables for that common setup.
    event_type_kwargs = {
        'help': 'Type of event.',
        'choices': [ 'centralnotice', 'landingpage' ],
        'required': True
    }

    config_kwargs = {
        'help': """Configuration file to use. (Without this option, the script looks for a
            configuraiton file in the working directory and in
            /etc/fr_user_event_consumer/.)"""
    }

    debug_kwargs = {
        'help': 'Output debugging info to stderr.',
        'action': 'store_true'

    }

    # There are two commands: 'consume' to consume log files, and 'purge-incomplete' to
    # clean out data from partially processed files following an interrupted run.
    commands = parser.add_subparsers( title = 'COMMANDS', dest = 'command' )
    commands.required = True

    # Set up the main command, consume log files
    consume_parser = commands.add_parser(
        'consume',
        help = 'Consume events from log files.'
    )

    consume_parser.add_argument( '-t', '--event-type', **event_type_kwargs )

    consume_parser.add_argument(
        '-d',
        '--directory',
        help =
            """Directory to read log files from. Files in sub-directories will also be
            consumed. (Defaults to the directory set in the configuration file.)"""
    )

    consume_parser.add_argument(
        '--file-glob',
        help =
            """Filename or glob to select log file(s) with events to consume. If not
            specified, defaults to filename glob set for this event type in the
            configuration file. Filenames ending in '.gz' are assumed to be compressed
            with gzip."""
    )

    # The two options to indicate the beginning of the time window for files to select
    # are mutually exclusive.
    since_grp = consume_parser.add_mutually_exclusive_group()

    since_grp.add_argument(
        '--from-latest-consumed',
        help =
            """Process files for times from the timestamp of most recent file consumed,
            inclusive. The last file processed will be included in the list to process,
            but it will be skipped. May not be used with the --from option.""",
        dest = 'from_latest',
        action = 'store_true'
    )

    since_grp.add_argument(
        '--from',
        help =
            """Process files with a timestamp equal to or later than this timestamp
            (using the timestamp format specified in the config file). May not be used
            with the --from-latest-consumed option.""",
        dest = 'from_timestamp'
    )

    consume_parser.add_argument(
        '--to',
        help =
            """Process files with a timestamp equal to or earlier than this timestamp
            (in the timestamp format specified in the config file).""",
        dest = 'to_timestamp'
    )

    consume_parser.add_argument( '--config', **config_kwargs )
    consume_parser.add_argument( '--debug', **debug_kwargs )

    # Set up the purge-incomplete command
    purge_parser = commands.add_parser(
        'purge-incomplete',
        help =
            """Delete from the database all data from events from files left in a state
            of incomplete processing, and delete from the database references to those
            files. This option should be used if a previous execution was interrupted.
            Before using it, the database should be backed up."""
    )

    purge_parser.add_argument( '-t', '--event-type', **event_type_kwargs )
    purge_parser.add_argument( '--config', **config_kwargs )
    purge_parser.add_argument( '--debug', **debug_kwargs )

    args = parser.parse_args()

    # Do stuff with options available to all commands
    config.filename = args.config # Will be None if the command-line option is not set
    cfg = config.get()

    setup_logging( args.debug )

    if args.event_type == 'centralnotice':
        event_type = EventType.CENTRAL_NOTICE
    elif args.event_type == 'landingpage':
        event_type = EventType.LANDING_PAGE
    else:
        raise ValueError( 'Invalid event type: {}'.format( args.event_type ) )

    # Consume command
    if args.command == 'consume':

        # Parse timestamp command-line arguments. This should raise an error if they're
        # not in the right format.
        timestamp_format_in_fn = cfg[ 'timestamp_format_in_filenames' ]

        from_timestamp = args.from_timestamp
        if from_timestamp:
            from_time = datetime.strptime( from_timestamp, timestamp_format_in_fn )
        else:
            from_time = None

        to_timestamp = args.to_timestamp
        if to_timestamp:
            to_time = datetime.strptime( to_timestamp, timestamp_format_in_fn )
        else:
            to_time = None

        from_latest = args.from_latest

        # Set directory and file_glob as per command-line arguments and config
        if args.directory:
            directory = args.directory
        elif event_type == EventType.CENTRAL_NOTICE:
            directory = cfg[ 'central_notice_directory' ]
        elif event_type == EventType.LANDING_PAGE:
            directory = cfg[ 'landing_page_directory' ]

        if args.file_glob:
            file_glob = args.file_glob
        elif event_type == EventType.CENTRAL_NOTICE:
            file_glob = cfg[ 'central_notice_file_glob' ]
        elif event_type == EventType.LANDING_PAGE:
            file_glob = cfg[ 'landing_page_file_glob' ]

        # Print a friendly confirmation message
        if from_latest:
            from_msg = 'from latest consumed'
        else:
            from_msg = 'from ' + from_timestamp if from_timestamp else 'no start time'

        to_msg = 'to ' + to_timestamp if to_timestamp else 'no end time'

        print( 'Consuming {} events in files matching \'{}\' in \'{}\' directory, {}, {}.'
            .format( event_type.output_name, file_glob, directory, from_msg, to_msg ) )

        # Call the controller
        # Event-type-specific controller arguments are just ignored if not needed.
        stats = controller.consume_events(
            event_type = event_type,
            db_settings = cfg[ 'db_settings' ],
            timestamp_format_in_filenames = timestamp_format_in_fn,
            extract_timestamp_regex = cfg[ 'extract_timestamp_regex' ],
            extract_sample_rate_regex = cfg[ 'extract_sample_rate_regex' ],
            directory = directory,
            file_glob = file_glob,
            default_str_validation_regex = cfg[ 'default_str_validation_regex' ],
            detail_languages = cfg[ 'central_notice_detail_languages' ],
            detail_projects_regex = cfg[ 'central_notice_detail_projects_regex' ],
            lp_max_batch = cfg[ 'landing_page_ingress_max_batch_size' ],
            from_latest = from_latest,
            from_time = from_time,
            to_time = to_time
        )

    elif args.command == 'purge-incomplete':
        print(
            ( 'Purge database of {} events from files in a state of incomplete processing, '
            'and purge records of those files. WARNING: Back up database before '
            'executing this command.' ).format( event_type.output_name )
        )

        confirm = input( 'Proceed? [y/N] ' )
        if confirm.strip() not in ( 'Y', 'y' ):
            sys.exit()

        stats = controller.purge_incomplete(
            event_type = event_type,
            db_settings = cfg[ 'db_settings' ]
        )

    else:
        # Should never get here
        raise ValueError( 'No valid command received' )

    # Output stats with descriptions
    print( '\n'.join( stats.describe() ) )
